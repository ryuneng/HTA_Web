20240105

필터
	- 전처리/후처리 작업을 담당하는 서블릿의 API
	- 전처리작업 : 로그인체크, 권한체크, 암호화된 요청데이터의 복호화, 요청파라미터에 대한 로그출력
	- 후처리작업 : 응답데이터의 암호화, 응답컨텐츠 압축, 요청처리에 소요된 시간 출력(요청처리 성능체크)
	- 필터는 여러 개 등록할 수 있고, 등록된 필터들은 FilterChain 객체에 의해서 관리된다.
	- FilterChain 객체는 요청이 접수되면 등록된 필터를 순서대로 실행하고, 더이상 실행할 필터가 없으면 JSP를 실행한다.
	
	
	
vo와 dto의 차이
	vo : Entity, 화면의 테이블
	dto : response, 화면의 응답
	
	
	
--------------------------------------------------------------------------------------------------
일정관리 게시판 코딩 시작 순서 (mvc1 방식)
	0. DataBase에 필요한 테이블이 있는지 체크 및 생성
		- 필요한 테이블
		  1. User : 기존에 만들어둔 COMM_USERS 테이블 사용
		  2. TodoCategory : 생성
		  3. Todo : 생성
		  
	1. 테이블에 맞게 vo 클래스부터 만들기 (생성자, getter&setter, toString)
		- 필요한 vo 클래스
		  1. User : 기존에 만들어둔 vo클래스 사용
		  2. TodoCategory : 생성
		  3. Todo : 생성
		
	2. dao 클래스 파일 생성 (메소드 정의할 클래스)
		- 필요한 dao 클래스
		  1. TodoCategoryDao : 생성
		  2. TodoDao : 생성
		  
	3. ibatis.mappers > xml 파일 생성
		- 필요한 xml
		  1. TodoCategories : 생성
		  2. Todos : 생성
	
	4. config.xml에 경로 등록 태그 추가 (이 설정은 ibatis, mybatis에 따라 달라지기 때문에 외울 필요 없고 검색해서 하면 됨. 참고만)
		  1. <sqlMap resource="ibatis/mappers/todo-categories.xml" />
		  2. <sqlMap resource="ibatis/mappers/todos.xml" />
		  
	5. jsp 파일 생성


	
일정 등록
	1. 일정 카테고리 출력하기
		1) todo-categories.xml에 SQL 구문 정의하기
			- 모든 일정카테고리를 조회하는 SQL 구문 정의하기
			
		2) TodoCategoryDao 클래스에 모든 일정카테고리를 반환하는 메소드 정의하기
			- 위에서 정의한 SQL 구문을 실행해서 모든 일정카테고리를 반환하는 메소드 정의하기
			
		3) form.jsp에 일정 카테고리 출력하기
			- 위에서 정의한 TodoCategoryDao의 메소드를 실행해서 모든 카테고리정보 조회하기
			- 조회된 카테고리목록으로 <option> 태그 생성
			
			
	2. 일정 등록하기
		1) comm_todos 테이블에 신규 일정 등록 시 필요한 값
			todo_no					<--- 시퀀스 값
			category_no				<--- 폼 입력값
			todo_title 				<--- 폼 입력값
			user_no    				<--- 로그인한 사용자 번호(세션에서 획득)
			todo_expected_date  	<--- 폼 입력값
			todo_content       	    <--- 폼 입력값
			
		2) todos.xml에 SQL 구문 정의하기
			<insert id="insertTodo" parameterClass="">
				insert into comm_todos
				(todo_no, category_no, todo_title, user_no, todo_expected_date, todo_content)
				values
				(todos_seq.nextval, ?, ?, ?, ?, ?)
			</insert>
		
		3) TodoDao에 새 일정정보를 전달받아서 저장시키는 메소드 정의하기
		
		4) insert.jsp에서 새 일정정보 등록 요청 처리하기
			0. 로그인여부 체크하기
				세션에서 로그인된 사용자정보를 조회해서 사용자정보가 존재하지 않으면
				로그인폼을 재요청하는 응답을 보내고, return문을 실행한다.
				
			1. 폼에서 제출하는 요청파라미터 파악하기
				categoryNo=101
				&title=제목제목제목
				&expectedDate=2024-01-05
				&content=내용내용내용
				
			2. 요청파라미터값 조회하기
			
			3. VO객체(Todo객체)를 생성하고, 요청파라미터값을 저장한다.
			
			4. 로그인된 사용자정보에서 사용자번호를 조회하고 VO객체에 저장한다.
			
			5. DAO객체를 생성하고, 새 일정을 등록시키는 메소드를 실행한다.
			
			6. 일정목록을 재요청하는 URL을 응답으로 보낸다.
				
				
	3. 일정 조회하기(페이징 처리)
		1) todos.xml에 SQL 구문 정의하기 (두 SQL은 항상 한쌍)
			- 모든 행의 개수를 조회하는 SQL
				<select id="getTotalRows" resultClass="int">
					select count(*)
					from comm_todos
					where todo_deleted = 'N'
				</select>
			- 현재 요청한 페이지번호의 조회 범위에 맞는 일정목록을 조회하는 SQL
				<select id=getTodos" parameterClass="map" resultClass="vo.Todo">
				</select>
				* parameterClass가 map인 이유 : begin, end(페이징처리)는 vo에 없는 변수이기 때문에
				
		2) TodoDao 클래스에 메소드 정의하기
			- 모든 행의 개수를 반환하는 메소드
			
			- 조회범위를 전달받아서 범위에 맞는 일정목록을 반환하는 메소드
			
			
		3) list.jsp에서 요청처리하기
			1. 클라이언트가 요청한 페이지 조회하기
				int currentPage = NumberUtils.toInt(request.getParameter("page"), 1);
				* 여기서의 "page"는 list.jsp?page=xxx의 파라미터
				* 맨뒤의 1은 page가 null일 때 대체할 값
				
			2. 전체 행의 개수 조회하기
				int totalRows = todoDao.getTotalRows();
				
			3. 페이징처리에 필요한 데이터를 제공한 Pagination 객체 생성하기
				Pagination pagination = new Pagination(currentPage, totalRows);
					조회범위 : begin, end
					페이지표시 범위 : beginPage, endPage
					요청한 현재 페이지가 첫페이지인지, 마지막페이지인지 여부 : isFirst, isEnd
					
			4. 요청한 페이지번호에 맞는 일정목록 조회하기 <-- begin, end값 사용
			
			5. 요청한 페이지번호에 맞는 페이지내비게이션 출력하기 <-- beginPage, endPage, isFirst, isLast값 사용
		
		
		